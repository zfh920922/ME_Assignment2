/*
 * generated by Xtext 2.10.0
 */
package at.ac.tuwien.big.statesml.ide.contentassist.antlr;

import at.ac.tuwien.big.statesml.ide.contentassist.antlr.internal.InternalStateSystemParser;
import at.ac.tuwien.big.statesml.services.StateSystemGrammarAccess;
import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class StateSystemParser extends AbstractContentAssistParser {

	@Inject
	private StateSystemGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalStateSystemParser createParser() {
		InternalStateSystemParser result = new InternalStateSystemParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getNodeAccess().getAlternatives(), "rule__Node__Alternatives");
					put(grammarAccess.getControlAccess().getAlternatives(), "rule__Control__Alternatives");
					put(grammarAccess.getStateAccess().getAlternatives(), "rule__State__Alternatives");
					put(grammarAccess.getStateAccess().getAlternatives_0_0(), "rule__State__Alternatives_0_0");
					put(grammarAccess.getValueSpecificationAccess().getAlternatives(), "rule__ValueSpecification__Alternatives");
					put(grammarAccess.getBooleanValueSpecificationAccess().getAlternatives(), "rule__BooleanValueSpecification__Alternatives");
					put(grammarAccess.getParameterDirectionKindAccess().getAlternatives(), "rule__ParameterDirectionKind__Alternatives");
					put(grammarAccess.getStateSystemAccess().getGroup_0(), "rule__StateSystem__Group_0__0");
					put(grammarAccess.getStateSystemAccess().getGroup_0_5(), "rule__StateSystem__Group_0_5__0");
					put(grammarAccess.getStateSystemAccess().getGroup_0_6(), "rule__StateSystem__Group_0_6__0");
					put(grammarAccess.getStateSystemAccess().getGroup_0_7(), "rule__StateSystem__Group_0_7__0");
					put(grammarAccess.getStateSystemAccess().getGroup_1(), "rule__StateSystem__Group_1__0");
					put(grammarAccess.getStateSystemAccess().getGroup_2(), "rule__StateSystem__Group_2__0");
					put(grammarAccess.getStateSystemAccess().getGroup_2_0(), "rule__StateSystem__Group_2_0__0");
					put(grammarAccess.getStateSystemAccess().getGroup_2_1(), "rule__StateSystem__Group_2_1__0");
					put(grammarAccess.getNodeAccess().getGroup_0(), "rule__Node__Group_0__0");
					put(grammarAccess.getEdgeAccess().getGroup(), "rule__Edge__Group__0");
					put(grammarAccess.getEdgeAccess().getGroup_0(), "rule__Edge__Group_0__0");
					put(grammarAccess.getControlAccess().getGroup_0(), "rule__Control__Group_0__0");
					put(grammarAccess.getControlAccess().getGroup_1(), "rule__Control__Group_1__0");
					put(grammarAccess.getStateAccess().getGroup_0(), "rule__State__Group_0__0");
					put(grammarAccess.getStateAccess().getGroup_1(), "rule__State__Group_1__0");
					put(grammarAccess.getStateAccess().getGroup_1_1(), "rule__State__Group_1_1__0");
					put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
					put(grammarAccess.getParameterValueAccess().getGroup(), "rule__ParameterValue__Group__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getChangeEventAccess().getGroup(), "rule__ChangeEvent__Group__0");
					put(grammarAccess.getSystemUnitAccess().getGroup(), "rule__SystemUnit__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup_1(), "rule__Transition__Group_1__0");
					put(grammarAccess.getStateSystemAccess().getNameAssignment_0_1(), "rule__StateSystem__NameAssignment_0_1");
					put(grammarAccess.getStateSystemAccess().getSystemUnitAssignment_0_3(), "rule__StateSystem__SystemUnitAssignment_0_3");
					put(grammarAccess.getStateSystemAccess().getAttributesAssignment_0_5_2(), "rule__StateSystem__AttributesAssignment_0_5_2");
					put(grammarAccess.getStateSystemAccess().getProcessibleEventsAssignment_0_6_2(), "rule__StateSystem__ProcessibleEventsAssignment_0_6_2");
					put(grammarAccess.getStateSystemAccess().getNodesAssignment_0_7_2(), "rule__StateSystem__NodesAssignment_0_7_2");
					put(grammarAccess.getStateSystemAccess().getNodesAssignment_1_2(), "rule__StateSystem__NodesAssignment_1_2");
					put(grammarAccess.getStateSystemAccess().getNodesAssignment_2_0_2(), "rule__StateSystem__NodesAssignment_2_0_2");
					put(grammarAccess.getStateSystemAccess().getEdgesAssignment_2_1_2(), "rule__StateSystem__EdgesAssignment_2_1_2");
					put(grammarAccess.getEdgeAccess().getNameAssignment_0_0(), "rule__Edge__NameAssignment_0_0");
					put(grammarAccess.getEdgeAccess().getSourceAssignment_1(), "rule__Edge__SourceAssignment_1");
					put(grammarAccess.getEdgeAccess().getTargetAssignment_3(), "rule__Edge__TargetAssignment_3");
					put(grammarAccess.getSelectionConvergenceAccess().getNameAssignment(), "rule__SelectionConvergence__NameAssignment");
					put(grammarAccess.getSelectionDivergenceAccess().getNameAssignment(), "rule__SelectionDivergence__NameAssignment");
					put(grammarAccess.getStateAccess().getInitialAssignment_0_0_0(), "rule__State__InitialAssignment_0_0_0");
					put(grammarAccess.getStateAccess().getTerminalAssignment_0_0_1(), "rule__State__TerminalAssignment_0_0_1");
					put(grammarAccess.getStateAccess().getNameAssignment_0_1(), "rule__State__NameAssignment_0_1");
					put(grammarAccess.getStateAccess().getNameAssignment_1_0(), "rule__State__NameAssignment_1_0");
					put(grammarAccess.getStateAccess().getActionSequenceAssignment_1_1_1(), "rule__State__ActionSequenceAssignment_1_1_1");
					put(grammarAccess.getFunctionCallAccess().getFunctionAssignment_0(), "rule__FunctionCall__FunctionAssignment_0");
					put(grammarAccess.getFunctionCallAccess().getParametersAssignment_2(), "rule__FunctionCall__ParametersAssignment_2");
					put(grammarAccess.getParameterValueAccess().getParameterAssignment_0(), "rule__ParameterValue__ParameterAssignment_0");
					put(grammarAccess.getParameterValueAccess().getValueSpecificationAssignment_2(), "rule__ParameterValue__ValueSpecificationAssignment_2");
					put(grammarAccess.getAttributeValueSpecificationAccess().getAttributeAssignment(), "rule__AttributeValueSpecification__AttributeAssignment");
					put(grammarAccess.getStringValueSpecificationAccess().getValueAssignment(), "rule__StringValueSpecification__ValueAssignment");
					put(grammarAccess.getBooleanValueSpecificationAccess().getValueAssignment_0(), "rule__BooleanValueSpecification__ValueAssignment_0");
					put(grammarAccess.getBooleanValueSpecificationAccess().getValueAssignment_1(), "rule__BooleanValueSpecification__ValueAssignment_1");
					put(grammarAccess.getIntegerValueSpecificationAccess().getValueAssignment(), "rule__IntegerValueSpecification__ValueAssignment");
					put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
					put(grammarAccess.getParameterAccess().getTypeAssignment_1(), "rule__Parameter__TypeAssignment_1");
					put(grammarAccess.getParameterAccess().getDirectionAssignment_2(), "rule__Parameter__DirectionAssignment_2");
					put(grammarAccess.getDataTypeAccess().getNameAssignment(), "rule__DataType__NameAssignment");
					put(grammarAccess.getFunctionAccess().getNameAssignment_0(), "rule__Function__NameAssignment_0");
					put(grammarAccess.getFunctionAccess().getParametersAssignment_1(), "rule__Function__ParametersAssignment_1");
					put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
					put(grammarAccess.getAttributeAccess().getTypeAssignment_2(), "rule__Attribute__TypeAssignment_2");
					put(grammarAccess.getChangeEventAccess().getNameAssignment_0(), "rule__ChangeEvent__NameAssignment_0");
					put(grammarAccess.getChangeEventAccess().getChangeExpressionAssignment_2(), "rule__ChangeEvent__ChangeExpressionAssignment_2");
					put(grammarAccess.getChangeExpressionAccess().getBooleanFunctionCallAssignment(), "rule__ChangeExpression__BooleanFunctionCallAssignment");
					put(grammarAccess.getSystemUnitAccess().getNameAssignment_1(), "rule__SystemUnit__NameAssignment_1");
					put(grammarAccess.getSystemUnitAccess().getAttributesAssignment_2(), "rule__SystemUnit__AttributesAssignment_2");
					put(grammarAccess.getTransitionAccess().getNameAssignment_0(), "rule__Transition__NameAssignment_0");
					put(grammarAccess.getTransitionAccess().getTriggerAssignment_1_1(), "rule__Transition__TriggerAssignment_1_1");
					put(grammarAccess.getTriggerAccess().getEventAssignment(), "rule__Trigger__EventAssignment");
					put(grammarAccess.getStateSystemAccess().getUnorderedGroup(), "rule__StateSystem__UnorderedGroup");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalStateSystemParser typedParser = (InternalStateSystemParser) parser;
			typedParser.entryRuleStateSystem();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public StateSystemGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(StateSystemGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
