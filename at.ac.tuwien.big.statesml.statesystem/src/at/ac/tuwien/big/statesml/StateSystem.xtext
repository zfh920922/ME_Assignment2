grammar at.ac.tuwien.big.statesml.StateSystem with org.eclipse.xtext.common.Terminals

import "http://www.big.tuwien.ac.at/statesml"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// TODO: Extend the Xtext grammar

StateSystem returns StateSystem:
		'statesystem' name=ID 'for' systemUnit=[SystemUnit|QualifiedName] '{'
	('attributes' '{' (attributes+=Attribute)+ '}')? 
	('events' '{' (processibleEvents+=ChangeEvent)+ '}')?
	('states' '{'(nodes+=State)+ '}') & 
	  ('transitions' '{'(nodes+=Transition)+ '}') &
	  ('control' '{'(nodes+=Control)+ '}')?
	('edges' '{' (edges+=Edge)+'}'
	)
	'}';


	
Edge:
 (name=ID':')? source=[Node|QualifiedName] '=>' target=[Node|QualifiedName]
	;


Control returns Node:
	'divergence' SelectionDivergence | 'convergence' SelectionConvergence
;

SelectionConvergence:
	 name=ID   
	
;

SelectionDivergence:
	 name=ID
;

State:
	(((initial?='initial'|^terminal?='terminal') name=ID)| name=ID ('{' actionSequence+=FunctionCall* '}')?)
;



FunctionCall:
	function=[Function|QualifiedName] '('(parameters+=ParameterValue)*')'
;

ParameterValue:
	parameter=[Parameter|QualifiedName] '=' valueSpecification=ValueSpecification (',')?
;

ValueSpecification:
	IntegerValueSpecification|BooleanValueSpecification|StringValueSpecification|AttributeValueSpecification
;

AttributeValueSpecification:
	attribute=[Attribute|QualifiedName]
;

StringValueSpecification:
	value=EString
;

BooleanValueSpecification:
	(value?='true'|value?='false')
;

IntegerValueSpecification:
	value=EInt
;

Parameter:
	name=ID type=[DataType|QualifiedName] direction=ParameterDirectionKind
;

enum ParameterDirectionKind:
	IN|RETURN
;

DataType:
	name=ID
;

Function:
	name=ID (parameters+=Parameter)*
;
QualifiedName returns ecore::EString:
	ID (=> '.' ID)*;

EString returns ecore::EString:
	STRING;

EInt returns ecore::EInt:
	'-'? INT;

Attribute:
	name=ID ':' type=[DataType|QualifiedName]
	
;

ChangeEvent:
	name=ID ':' changeExpression=ChangeExpression
;

ChangeExpression:
	booleanFunctionCall=FunctionCall
;

SystemUnit:
	'systemUnit' name=ID (attributes+=Attribute)*
;

Transition returns Transition:
	name=ID ('triggerd-by' trigger=Trigger)?

		;
Trigger:
	event=[ChangeEvent|QualifiedName]
;